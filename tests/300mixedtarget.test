#!/usr/bin/env tclsh

package require tcltest
namespace import tcltest::*

package require fileutil
package require struct::list

set testScript [file normalize [info script]]

test load "Make sure it is loadable." {
    source [file dirname [file dirname $testScript]]/TclTaskRunner.tcl
} ""

proc read_file {fn} {
    set fh [open $fn]
    set data [read $fh]
    close $fh
    set data
}

proc sum {val args} {
    set sum $val
    foreach i $args {
        incr sum $i
    }
    set sum
}

set THEME mixed
set C 0

test $THEME-create "create TclTaskRunner instance" {

    set debug [TclTaskRunner::default ::env(DEBUG) 0]
    TclTaskRunner dep -debug $debug -quiet [expr {! $debug}]

} ::dep

set FOO_VAL 100
set BAR_VAL 200
makeFile $FOO_VAL foo.src
makeFile $BAR_VAL bar.src

test $THEME-target-add "target add" {

    # file -> memory
    dep target add ::FOO depends {
        foo.src
    } action {
        set ::FOO [read_file $<]
    }

    # memory -> file
    dep target add foo.txt depends {
        ::FOO
    } action {
        makeFile [set $<] $@
    }

    dep target list
} [list ::FOO foo.txt]

test $THEME-target-update-[incr C] "update" {
    
    set log [dep update foo.txt]
    
    list [read_file foo.txt] [dict get $log updated]

} [list "$FOO_VAL\n" [list ::FOO foo.txt]]

#========================================
after [expr {1000 - [clock milliseconds] % 1000}]

#========================================

set FOO_VAL 150
makeFile $FOO_VAL foo.src

test $THEME-target-update-[incr C] "update file target" {
    
    set log [dep update foo.txt]

    list [dict get $log updated] [read_file foo.txt]

} [list [list ::FOO foo.txt] "$FOO_VAL\n"]


    # # file -> memory
    # dep target add ::BAR check {
    #     expr {[info exists $@] && [file mtime $<] < $::MTIME($<)}
    # } depends {
    #     bar.src
    # } action {
    #     set ::MTIME($<) [file mtime $<]
    #     set ::BAR [read_file $<]
    # }

    # # memory -> file
    # dep target add bar.txt depends {
    #     ::BAR
    # } action {
    #     makeFile [set $<] $@
    # }

    # # file + file -> memory
    # dep target add ::BAZ depends {
    #     foo.txt bar.txt
    # } action {
    #     set $@ [sum {*}[::fileutil::cat $^]]
    # }


cleanupTests

